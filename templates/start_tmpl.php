<!DOCTYPE html>
<html lang="en">
<head>
    <?php include_once(__DIR__ . "/include/header.php"); ?>
    <style>
        .subfolder {
            padding-left: 30px;
        }
    </style>
</head>
<body>
  <nav class="light-blue lighten-1" role="navigation">
    <div class="nav-wrapper container">
        <a id="logo-container" href="#" class="brand-logo">SwiftTrack</a>
    </div>
  </nav>

  <div class="section no-pad-bot" id="index-banner">
    <div class="container">
      <br><br>
      <h1 class="header center light-blue-text lighten-1">{{welcome}}</h1>
      <div class="row center">
        <h5 class="header col s12 light">
            SwiftTrack был создан для определенных задач. И мы знаем, что вам нужно!
        </h5>
      </div>
      <br><br>

    </div>
  </div>

  <div class="container">
      <div class="row">
          <div class="col l12">
              <h4 class="header light-blue-text lighten-1">Для чего подойдет фреймворк?</h4>
              <p class="blue-grey-text">
                  <b>1. Для построения простого REST API.</b><br/>
                  Определите эндпойнты в маршрутах, укажите их методы и опишите контроллеры. Добавьте Middleware для проверки авторизации
                  и запрашивайте данные из базы проекта. SwiftTrack работает со всеми методами маршрутов GET, POST,  PUT, DELETE, OPTION.
              </p>
              <p class="blue-grey-text">
                  <b>2. Для создания лендингов и промо-сайтов.</b><br/>
                  С помощью фреймворка легко создать сайт с любой версткой и логикой. Вы можете использовать полностью статичные шаблоны страниц
                  или добавить динамику при необходимости. Выбирайте данные из базы и сохраняйте результаты форм. Потребуется минимум php кода
                  и Вы сможете полностью сосредоточиться на визуальной части страниц и js.
              </p>
              <p class="blue-grey-text">
                  <b>3. Тестирование MVP и различных гипотез продуктов.</b><br/>
                  Создайте свой MPV проект на базе фреймворка. Это займет минимум времени, а Вы сможете вложить больше усилий в привлечение клиентов и маркетинг.
                  Что-то идет не так? Правки будут очень быстрыми. А благодаря простой архитектуре SwiftTrack, Вы легко смените фреймворк на другой, когда
                  Ваш продукт до этого дорастет.
              </p>
          </div>
      </div>
  </div>

  <div class="container">
      <div class="row">
          <div class="col l12">
              <h4 class="header light-blue-text lighten-1">Как устроен SwiftTrack?</h4>
              <p class="blue-grey-text">
                  Фреймворк реализует паттерн MVC и контроллеры являются его главной компонентной частью. Все вызовы приложения рано или поздно
                  попадают в определенный контроллер. Контроллер в свою очередь обращается за данными и выводит их через рендер шаблона страницы.
              </p>
              <p class="blue-grey-text">
                  Рендер шаблона не является единственно возможным результатом работы контроллера. Разработчик полностью и самостоятельно определяет,
                  что именно в итоге должен сделать контроллер.<br/><br/>
                  SwiftTrack не содержит полноценного встроенного шаблонизатора, и это но не случайно!
                  В большинстве проектов включение php кода непосредственно в шаблоны, работает достаточно хорошо!
                  Вы можете использовать включения переменных через <i>&lt;?php echo $variable;?&gt;</i>, полноценные php циклы, а также использовать переменные вида <i>{{variable}}</i> передаваемые
                  в шаблон из контроллера. <br/><br/>
                  Для любых шаблонов доступны подключения php файлов в виде <i>&lt;?php include_once("my_template.php"); ?&gt;</i>, что позволяет использовать
                  повторяющийся код шаблонов везде, где требуется. SwiftTrack не рекомендует выносить логику приложения в шаблоны html. Она должна оставаться в контроллерах и моделях!


              </p>
              <p class="blue-grey-text">
                  При разработке SwiftTrack во главе угла стояла идея о максимально быстром запуске приложения, чтобы можно было сосредоточиться на отдельных
                  частях и проработке главной идеи разрабатываемого сервиса или сайта. Каждый маршрут обрабатываемый фреймворком может
                  быть отдельным микросервисом с изолированными данными и собственными шаблонами страниц.<br/><br/>
              </p>
              <p class="blue-grey-text">
              <blockquote>
                  Мы убеждены, что самым лучшим способом Вашего знакомства будет установка SwiftTrack и запуск первого приложения!
                  Посмотрев демо сайт поставляемый вместе с фреймворком, Вы легко разберетесь как работать с SwiftTrack, даже если Вы не слишком
                  опытны в php разработке.
              </blockquote>
              </p>
              <br/><br/>
              <h6 class="header">Структура фреймворка</h6>
              <ul id="root">
                  <li class="folder">app ↓
                      <ul>
                          <li class="subfolder">
                              <ul>
                                  <li>+ Controllers</li>
                                  <li>+ Database</li>
                                  <li>+ Exceptions</li>
                                  <li>+ Middleware</li>
                                  <li>+ Request</li>
                                  <li>+ Router</li>
                                  <li>+ Utils</li>
                              </ul>
                          </li>
                      </ul>
                  </li>
              </ul>
              <p class="blue-grey-text">
                  <span class="method">App/Controllers</span><br/>
                  Содержит файлы контроллеров. В SwiftTrack все завязано на контроллеры, которые являются наследниками от абстрактного класса <i>BaseController</i>.
                  Назначение контроллеров - обработка конечной точки маршрута вашего приложения. Контроллеры, в зависимости от назначения, могут
                  выводить подготовленные шаблоны страниц, отдавать json/xml, либо что-то еще. Рендер отличный от html кода остается на усмотрение
                  разработчика и не реализован в SwiftTrack.
              </p>
              <p class="blue-grey-text">
                  <span class="method">App/Database</span><br/>
                  Содержит классы для подключения к базе данных, базовый абстрактный класс модели таблицы данных, а также простейшие построители запросов.
                  Фреймворк не предоставляет полноценную ORM, но в то же время, у разработчика есть возможность работать с SQL запросами любой сложности с
                  помощью класса FreeBuilder.
              </p>
              <p class="blue-grey-text">
                  <span class="method">App/Exceptions</span><br/>
                  Базовые классы для обработки различных ошибок приложения.
              </p>
              <p class="blue-grey-text">
                  <span class="method">App/Middleware</span><br/>
                  Классы для реализации промежуточного слоя. Например, для проверки аутентификацию пользователя, перед отдачей контента.
              </p>
              <p class="blue-grey-text">
                  <span class="method">App/Request</span><br/>
                  Класс Request используется в контроллерах и промежуточных слоях для обработки запросов.
              </p>
              <p class="blue-grey-text">
                  <span class="method">App/Router</span><br/>
                  Класс Router используется для обработки маршрутов. Класс Route используется для определения маршрутов.
                  SwiftTrack позволяет разделять запросы к маршрутам по http методам и внедрять обработчики промежуточного слоя в маршруты. Это позволяет быстро
                  строить полноценные Rest API приложения.
              </p>
              <p class="blue-grey-text">
                  <span class="method">App/Utils</span><br/>
                  Служит для хранения пользовательских классов различного назначения.
              </p>
              <p class="blue-grey-text">
                  Узнайте больше о <a href="{{root}}/docs/router/">маршрутизации и маршрутах.</a>
              </p>
          </div>
      </div>
  </div>

  <?php include_once(__DIR__ . "/include/footer.php"); ?>


  </body>
</html>
